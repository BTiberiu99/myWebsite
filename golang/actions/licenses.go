package actions

import (
	"management/enums"
	"management/models"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (License)
// DB Table: Plural (licenses)
// Resource: Plural (Licenses)
// Path: Plural (/licenses)
// View Template Folder: Plural (/templates/licenses/)

// LicensesResource is the resource for the License model
type LicensesResource struct {
	buffalo.Resource
}

// List gets all Licenses. This function is mapped to the path
// GET /licenses
func (v LicensesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return InternalError(c)
	}

	licenses := &models.Licenses{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Licenses from the DB
	if err := q.All(licenses); err != nil {
		return InternalError(c)
	}

	return c.Render(http.StatusOK, r.JSON(Response{
		Data:       licenses,
		Pagination: q.Paginator,
	}))
}

// Show gets the data for one License. This function is mapped to
// the path GET /licenses/{license_id}
func (v LicensesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return InternalError(c)
	}

	// Allocate an empty License
	license := &models.License{}

	// To find the License the parameter license_id is used.
	if err := tx.Find(license, c.Param("license_id")); err != nil {
		return Error(c, http.StatusNotFound, "license.not_found")
	}

	return c.Render(http.StatusOK, r.JSON(Response{
		Data: license,
	}))
}

// New renders the form for creating a new License.
// This function is mapped to the path GET /licenses/new
func (v LicensesResource) New(c buffalo.Context) error {
	return c.Error(http.StatusNotFound, errors.New("Not implemented"))
}

// Create adds a License to the DB. This function is mapped to the
// path POST /licenses
func (v LicensesResource) Create(c buffalo.Context) error {

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return InternalError(c)
	}

	// Allocate an empty License
	license := &models.License{}

	// Bind license to the html form elements
	if err := c.Bind(license); err != nil {
		return Error(c, http.StatusForbidden, "license.create.failed")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(license)
	if err != nil {
		return InternalError(c)
	}

	if verrs.HasAny() {

		// Render again the new.html template that the user can
		// correct the input.

		return Error(c, http.StatusForbidden, "license.create.failed", verrs)
	}

	// and redirect to the licenses index page
	return Success(c, "license.created.success", license)
}

// Edit renders a edit form for a License. This function is
// mapped to the path GET /licenses/{license_id}/edit
func (v LicensesResource) Edit(c buffalo.Context) error {
	return c.Error(http.StatusNotFound, errors.New("Not implemented"))
}

// Update changes a License in the DB. This function is mapped to
// the path PUT /licenses/{license_id}
func (v LicensesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return InternalError(c)
	}

	// Allocate an empty License
	license := &models.License{}

	if err := tx.Find(license, c.Param("license_id")); err != nil {
		return Error(c, http.StatusNotFound, "license.update.failed")
	}

	// Bind License to the html form elements
	if err := c.Bind(license); err != nil {
		return Error(c, http.StatusForbidden, "license.update.failed")
	}

	verrs, err := tx.ValidateAndUpdate(license)
	if err != nil {
		return InternalError(c)
	}

	if verrs.HasAny() {

		// Render again the edit.html template that the user can
		// correct the input.
		return Error(c, http.StatusForbidden, "license.update.failed", verrs)
	}

	// and redirect to the licenses index page
	return Success(c, "license.updated.success", license)
}

// Destroy deletes a License from the DB. This function is mapped
// to the path DELETE /licenses/{license_id}
func (v LicensesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty License
	license := &models.License{}

	// To find the License the parameter license_id is used.
	if err := tx.Find(license, c.Param("license_id")); err != nil {
		return Error(c, http.StatusNotFound, "license.destroy.failed")
	}

	if err := tx.Destroy(license); err != nil {
		return Error(c, http.StatusForbidden, "license.destroy.failed")
	}

	// Redirect to the licenses index page
	return Success(c, enums.LicenseDestroySuccess)
}

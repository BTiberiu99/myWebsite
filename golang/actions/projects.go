package actions

import (
	"management/enums"
	"management/models"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Project)
// DB Table: Plural (projects)
// Resource: Plural (Projects)
// Path: Plural (/projects)
// View Template Folder: Plural (/templates/projects/)

// ProjectsResource is the resource for the Project model
type ProjectsResource struct {
	buffalo.Resource
}

// List gets all Projects. This function is mapped to the path
// GET /projects
func (v ProjectsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	projects := &models.Projects{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Projects from the DB
	if err := q.All(projects); err != nil {
		return InternalError(c)
	}

	return c.Render(http.StatusOK, r.JSON(Response{
		Data:       projects,
		Pagination: q.Paginator,
	}))
}

// Show gets the data for one Project. This function is mapped to
// the path GET /projects/{project_id}
func (v ProjectsResource) Show(c buffalo.Context) error {

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return InternalError(c)
	}

	// Allocate an empty User
	project := &models.Project{}

	// To find the User the parameter user_id is used.
	if err := tx.Find(project, c.Param("project_id")); err != nil {
		return Error(c, http.StatusNotFound, "project.not_found")
	}

	return c.Render(http.StatusOK, r.JSON(Response{Data: project}))
}

// New renders the form for creating a new Project.
// This function is mapped to the path GET /projects/new
func (v ProjectsResource) New(c buffalo.Context) error {
	return c.Render(http.StatusNotFound, nil)
}

// Create adds a Project to the DB. This function is mapped to the
// path POST /projects
func (v ProjectsResource) Create(c buffalo.Context) error {

	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return InternalError(c)
	}

	// Allocate an empty Project
	project := &models.Project{}

	// Bind project to the html form elements
	if err := c.Bind(project); err != nil {
		return Error(c, http.StatusForbidden, "project.create.failed")
	}

	// Get the DB connection from the context

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(project)
	if err != nil {

		return InternalError(c)
	}

	if verrs.HasAny() {

		return Error(c, http.StatusForbidden, "project.create.failed", verrs.Errors)
	}

	return Success(c, "project.create.success", project)
}

// Edit renders a edit form for a Project. This function is
// mapped to the path GET /projects/{project_id}/edit
func (v ProjectsResource) Edit(c buffalo.Context) error {
	return c.Render(http.StatusNotFound, nil)
}

// Update changes a Project in the DB. This function is mapped to
// the path PUT /projects/{project_id}
func (v ProjectsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return InternalError(c)
	}

	// Allocate an empty Project
	project := &models.Project{}

	if err := tx.Find(project, c.Param("project_id")); err != nil {
		return Error(c, http.StatusNotFound, "project.update.failed")
	}

	// Bind Project to the html form elements
	if err := c.Bind(project); err != nil {
		return Error(c, http.StatusForbidden, "project.update.failed")
	}

	verrs, err := tx.ValidateAndUpdate(project)
	if err != nil {

		return InternalError(c)
	}

	if verrs.HasAny() {
		return Error(c, http.StatusForbidden, "project.update.failed", verrs.Errors)
	}

	return Success(c, enums.ProjectUpdateSuccess, project)
}

// Destroy deletes a Project from the DB. This function is mapped
// to the path DELETE /projects/{project_id}
func (v ProjectsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return InternalError(c)
	}

	// Allocate an empty Project
	project := &models.Project{}

	// To find the Project the parameter project_id is used.
	if err := tx.Find(project, c.Param("project_id")); err != nil {
		return Error(c, http.StatusNotFound, "project.destroyed.failed")
	}

	if err := tx.Destroy(project); err != nil {
		return Error(c, http.StatusForbidden, "project.destroyed.failed")
	}

	return Success(c, enums.ProjectDestroySuccess)
}

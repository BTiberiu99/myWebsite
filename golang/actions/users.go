package actions

import (
	"fmt"
	"log"
	"net/http"
	"time"

	"management/enums"
	"management/mailers"
	"management/models"

	"github.com/dgrijalva/jwt-go"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/buffalo/worker"
	"github.com/gobuffalo/nulls"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (User)
// DB Table: Plural (users)
// Resource: Plural (Users)
// Path: Plural (/users)
// View Template Folder: Plural (/templates/users/)

// UsersResource is the resource for the User model

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (User)
// DB Table: Plural (users)
// Resource: Plural (Users)
// Path: Plural (/users)
// View Template Folder: Plural (/templates/users/)

// UsersResource is the resource for the User model
type UsersResource struct {
	buffalo.Resource
}

// List gets all Users. This function is mapped to the path
// GET /users
func (v UsersResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return InternalError(c)
	}

	users := &models.Users{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Users from the DB
	if err := q.All(users); err != nil {
		return errors.WithStack(err)
	}

	return c.Render(http.StatusOK, r.JSON(Response{Data: users}))
}

// Show gets the data for one User. This function is mapped to
// the path GET /users/{user_id}
func (v UsersResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return InternalError(c)
	}

	// Allocate an empty User
	user := &models.User{}

	// To find the User the parameter user_id is used.
	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return Error(c, http.StatusForbidden, enums.UserNotFound)
	}

	return c.Render(http.StatusOK, r.JSON(Response{Data: user}))
}

// New renders the form for creating a new User.
// This function is mapped to the path GET /users/new
func (v UsersResource) New(c buffalo.Context) error {
	return c.Error(http.StatusNotFound, errors.New("not available"))
}

// Create adds a User to the DB. This function is mapped to the
// path POST /users
func (v UsersResource) Create(c buffalo.Context) error {

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errNoTransaction
	}

	// Allocate an empty User
	user := &models.User{}

	// Bind user to the html form elements
	if err := c.Bind(user); err != nil {
		return InternalError(c)
	}

	verrs, err := tx.Eager("Settings", "Actions").ValidateAndCreate(user)

	if err != nil {

		log.Print(err)
		return InternalError(c)
	}

	if verrs.HasAny() {

		return Error(c, http.StatusForbidden, enums.UserCreateFailed, verrs.Errors)

	}

	//Create jwt token
	claims := jwt.StandardClaims{
		ExpiresAt: time.Now().Add(authTokenTime).Unix(),
		Id:        fmt.Sprintf("%d", user.ID),
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	tokenString, err := token.SignedString(secretKey)

	if err != nil {

		return InternalError(c)
	}

	//End create jwt token

	//Send confirm email
	App().Worker.Perform(mailers.NewJob(worker.Args{
		"user_id":   user.ID,
		EmailJobArg: mailers.EmailWelcomeJob,
	}))

	return Success(c, enums.UserCreateSuccess, AuthData{
		Token: tokenString,
		User:  user,
	})
}

// Edit renders a edit form for a User. This function is
// mapped to the path GET /users/{user_id}/edit
func (v UsersResource) Edit(c buffalo.Context) error {
	return c.Error(http.StatusNotFound, errors.New("not available"))
}

// Update changes a User in the DB. This function is mapped to
// the path PUT /users/{user_id}
func (v UsersResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return InternalError(c)
	}

	// Allocate an empty User
	user := &models.User{}

	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return Error(c, http.StatusNotFound, enums.UserNotFound)
	}

	// Bind User to the html form elements
	if err := c.Bind(user); err != nil {
		return InternalError(c)
	}

	verrs, err := tx.ValidateAndUpdate(user)

	if err != nil {
		return InternalError(c)
	}

	if verrs.HasAny() {

		return Error(c, http.StatusForbidden, enums.UserUpdateFailed, verrs.Errors)
	}

	// and redirect to the users index page
	return c.Render(http.StatusOK, r.JSON(user))
}

// Destroy deletes a User from the DB. This function is mapped
// to the path DELETE /users/{user_id}
func (v UsersResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return InternalError(c)
	}

	// Allocate an empty User
	user := &models.User{}

	// To find the User the parameter user_id is used.
	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return Error(c, http.StatusNotFound, enums.UserNotFound)
	}

	if err := tx.Destroy(user); err != nil {
		return Error(c, http.StatusForbidden, enums.UserDestroyFailed)
	}

	// Redirect to the users index page
	return Success(c, enums.UserDestroySuccess)
}

// Confirm user email
// to the path GET /users/confirm/{token}
func (v UsersResource) Confirm(c buffalo.Context) error {

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return InternalError(c)
	}

	token := c.Param("token")

	if token == "" {
		return Error(c, http.StatusForbidden, enums.UserConfirmNoToken)
	}

	// Allocate an empty User
	action := &models.UserAction{}

	// To find the User the parameter user_id is used.
	if err := tx.Where("token = ? ", token).Eager("User").First(action); err != nil {
		return Error(c, http.StatusNotFound, enums.UserActionNotFound)
	}

	action.User.JoinedAt = nulls.NewTime(time.Now())

	if err := tx.Destroy(action); err != nil {
		return Error(c, http.StatusForbidden, enums.UserConfirmFailed)
	}

	if err := tx.Update(action.User.JoinedAt); err != nil {
		return Error(c, http.StatusForbidden, enums.UserConfirmFailed)
	}

	// Redirect to the users index page
	return c.Redirect(http.StatusMovedPermanently, "/")
}
